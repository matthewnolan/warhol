<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="robots" content="noindex, nofollow">
  <meta name="googlebot" content="noindex, nofollow">

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>

<script src="/bower_components/angular/angular.js"></script>
<script src="/bower_components/angular-touch/angular-touch.js"></script>
<script src="/bower_components/angular-animate/angular-animate.js"></script>
<script src="/bower_components/angular-sanitize/angular-sanitize.min.js"></script>
<script src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
<script src="/bower_components/underscore/underscore-min.js"></script>
<script src="/bower_components/angular-ui-grid/ui-grid.js"></script>

<script type="text/javascript" src="http://www.parsecdn.com/js/parse-latest.js"></script>

<link rel="stylesheet" type="text/css" href="/bower_components/bootstrap/dist/css/bootstrap.min.css " /> 
<link rel="stylesheet" type="text/css" href="/bower_components/bootstrap/dist/css/bootstrap-theme.min.css " /> 
<link rel="stylesheet" type="text/css" href="/bower_components/angular-ui-grid/ui-grid.css" /> 



<style>
.grid {
  width: 99%;
  height: 50vh;
}
.text-warning {
  color: #8a6d3b; 
}
</style>

<title>Warhol</title>

<script type='text/javascript'>

var app = angular.module('uigrid', ['ngTouch', 'ui.grid', 'ui.grid.edit']);

app.controller('MainCtrl', ['ProductsService', '$scope', function (ProductsService, $scope) {

    $scope.sort = [];
    $scope.filter = [];
    $scope.pagination = {
        pageSize: 6,
        pageNumber: 1,
        totalItems: null,
        getTotalPages: function () {
            return Math.ceil(this.totalItems / this.pageSize);
        },
        nextPage: function () {
            if (this.pageNumber < this.getTotalPages()) {
                this.pageNumber++;
                $scope.load();
            }
        },
        previousPage: function () {
            if (this.pageNumber > 1) {
                this.pageNumber--;
                $scope.load();
            }
        }
    };
    
    $scope.gridOptions = {
        excludeProperties: '__metadata',
        enablePaginationControls: false,
        useExternalSorting: true,
        useExternalFiltering: true,
        enableFiltering: true,
        onRegisterApi: function (gridApi) {
            $scope.gridApi = gridApi;
            
            //declare the events
            $scope.gridApi.core.on.sortChanged($scope, function (grid, sortColumns) {
                $scope.sort = [];
                angular.forEach(sortColumns, function (sortColumn) {
                    $scope.sort.push({
                        fieldName: sortColumn.name,
                        order: sortColumn.sort.direction
                    });
                });
                $scope.load();
            });

            $scope.gridApi.core.on.filterChanged($scope, function () {
                $scope.filter = [];

                var grid = this.grid;
                angular.forEach(grid.columns, function (column) {
                    var fieldName = column.field;
                    var value = column.filters[0].term;
                    var operator = "contains";
                    if (value) {
                        if (fieldName == "objectId") operator = "equals";
                        else if (fieldName == "price") operator = "greaterThanOrEqualsTo";
                        $scope.filter.push({
                            fieldName: fieldName,
                            operator: operator,
                            value: value
                        });
                    }
                });

                $scope.load();
            });
            
            $scope.gridApi.edit.on.afterCellEdit($scope, function(rowEntity, colDef, newValue, oldValue) {
                var objectId = rowEntity.objectId;
                var data = {};
                data[colDef.name] = newValue;
                
                ProductsService.update(objectId, data).then(function(response){
                    $scope.load(); //The change may trigger other server side action that may change additional data
                    $scope.$apply();
                });
            });
        }
    };


    // var test = {
    //     name: "Juan Atkins",
    //     type: "DJJJJ",
    //     description: "dope beats",
    //     music: "techno"
    // }
    // ProductsService.create(test).then(function(response){
    //     console.log(response);
    //     $scope.load(); //The change may trigger other server side action that may change additional data
    //     $scope.$apply();
    // });

    // ProductsService.delete("1").then(function(response){
    //     console.log(response);
    //     $scope.load(); //The change may trigger other server side action that may change additional data
    //     $scope.$apply();
    // });

    
    $scope.gridOptions.columnDefs = [
        { name: 'objectId', enableCellEdit: false, width: '10%' },
        { name: 'artist', enableCellEdit: false, displayName: 'Artist', width: '20%' },
        { name: 'title', displayName: 'Title', enableCellEdit: true, width: '20%' },
        { name: 'type', displayName: 'Type', width: '30%' },
        { name: 'price', displayName: 'Price', width: '20%' }
    ];
 

    $scope.load = function () {
        ProductsService.readAll($scope.pagination.pageSize, $scope.pagination.pageNumber, $scope.sort, $scope.filter).then(function (response) {

            console.log(response[0].toJSON());
            var stuff = [];
            for (var i=0; i < response.length; i++){
                stuff.push(response[i].toJSON())
            }
            $scope.gridOptions.data = stuff;
            $scope.pagination.totalItems = response.totalRows;

        });
    };

    $scope.load();
}]);


(function () {

    angular.module('uigrid')
        .service('ProductsService', ['$http', ProductsService]);

    function ProductsService($http) {

        var self = this;
        Parse.initialize("x41DyXourtwVQxl7L70DuD03Bi8dxxHQG9ZWtnBj", "GdbAmLm0Z84ySV6tPPkBLmc6LZajDqvWoL0u7ja2");


        self.readAll = function (pageSize, pageNumber, sort, filter) {
            var products = Parse.Object.extend("Products");
            var query = new Parse.Query(products);
            return query.find();    
        }
        self.readOne = function (id) {
            var products = Parse.Object.extend("Products");
            var query = new Parse.Query(products);
            query.equalTo("objectId", id);
            return query.find();
        }
        self.create = function (data) {
            var Products = Parse.Object.extend("Products");
            var products = new Products();
            return products.save(product1)
        }
        self.update = function (id, data) {
            var products = Parse.Object.extend("Products");
            var query = new Parse.Query(products);
            query.equalTo("objectId", id);
            return query.find({
              success: function(results) {
                console.log(results);
                results[0].save(data, {
                    success: function(object) {
                        console.log(object);
                        return object
                    },
                    error: function(model, error) {
                        console.log(model, error);
                    }  
                })      
              },
              error: function(error) {
                console.error(error);
              }
            });     

        }
        self.delete = function (id) {
            var products = Parse.Object.extend("Products");
            var query = new Parse.Query(products);
            query.equalTo("objectId", id);
            return query.find( {
              success: function(results) {
                console.log(results);
                results[0].destroy({
                    success: function(object) {
                        console.log(object);
                        return object
                    },
                    error: function(model, error) {
                        console.log(model, error);
                    }  
                })      
              },
              error: function(error) {
                console.error(error);
              }
            });      
        }
    }
}());


</script>

  
</head>

<body>
<div ng-app="uigrid" ng-controller="MainCtrl" class="container-fluid">
    <div class="row">
        <div class="col-sm-12">
            <div>
                <p><h1>Warhol. A database of art works</h1></p>

                <form>
                    Piece Name:<br>
                    <input type="text" name="firstname" ><br>
                    Last name:<br>
                    <input type="text" name="lastname">
                </form>

                <div ui-grid="gridOptions" class="grid" ui-grid-edit></div>
                <p>Current page:
                    <input type="number" min="1" max="{{ pagination.getTotalPages() }}" ng-model="pagination.pageNumber" ng-change="load()">of {{ pagination.getTotalPages() }}</p>
                <button type="button" class="btn btn-success" ng-click="pagination.previousPage()">previous page</button>
                <button type="button" class="btn btn-success" ng-click="pagination.nextPage()">next page</button>
            </div>
        </div>
    </div>
</div>
  
</body>

</html>

